name: CI/CD Pipeline

on:
  push:
    branches:
      - prod
      - staging
      - dev
  pull_request:

env:
  IMAGE_NAME: emmanuelomoiya/trustpadi-test

jobs:
  build-test-lint:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        run: npm i -g pnpm@10.13.1

      - name: Install Dependencies
        run: pnpm install

      # - name: Lint Code
      #   run: pnpm run lint

      # - name: Run Tests
      #   run: pnpm run test

      - name: Build Project
        run: pnpm run build

  sonar-scan:
    needs: build-test-lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  docker:
    needs: [build-test-lint, sonar-scan]
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ github.ref_name }}

  # trivy-scan:
  #   needs: docker
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Install Trivy
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: ${{ env.IMAGE_NAME }}:${{ github.ref_name }}
  #         format: 'table'
  #         exit-code: '1'
  #         ignore-unfixed: true
  #         vuln-type: 'os,library'

  deploy:
    needs: [docker]
    # if: github.ref_name == 'prod' || github.ref_name == 'staging'
    runs-on: ubuntu-latest

    steps:
      - name: SSH and Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull ${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            docker stop api_${{ github.ref_name }} || true
            docker rm api_${{ github.ref_name }} || true
            docker compose up -d --force-recreate --build api_${{ github.ref_name }}